/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.test.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.test.model.Courses;
import com.test.model.CoursesModel;
import com.test.model.CoursesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Courses service. Represents a row in the &quot;mz_Courses&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.test.model.CoursesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CoursesImpl}.
 * </p>
 *
 * @author mzos
 * @see CoursesImpl
 * @see com.test.model.Courses
 * @see com.test.model.CoursesModel
 * @generated
 */
@JSON(strict = true)
public class CoursesModelImpl extends BaseModelImpl<Courses>
	implements CoursesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a courses model instance should use the {@link com.test.model.Courses} interface instead.
	 */
	public static final String TABLE_NAME = "mz_Courses";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cId", Types.BIGINT },
			{ "cName", Types.VARCHAR },
			{ "cCat", Types.VARCHAR },
			{ "cDesc", Types.VARCHAR },
			{ "cPreq", Types.VARCHAR },
			{ "cDuration", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table mz_Courses (cId LONG not null primary key,cName VARCHAR(75) null,cCat VARCHAR(75) null,cDesc VARCHAR(75) null,cPreq VARCHAR(75) null,cDuration INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table mz_Courses";
	public static final String ORDER_BY_JPQL = " ORDER BY courses.cId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY mz_Courses.cId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.test.model.Courses"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.test.model.Courses"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.test.model.Courses"),
			true);
	public static long CCAT_COLUMN_BITMASK = 1L;
	public static long CID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Courses toModel(CoursesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Courses model = new CoursesImpl();

		model.setCId(soapModel.getCId());
		model.setCName(soapModel.getCName());
		model.setCCat(soapModel.getCCat());
		model.setCDesc(soapModel.getCDesc());
		model.setCPreq(soapModel.getCPreq());
		model.setCDuration(soapModel.getCDuration());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Courses> toModels(CoursesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Courses> models = new ArrayList<Courses>(soapModels.length);

		for (CoursesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.test.model.Courses"));

	public CoursesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Courses.class;
	}

	@Override
	public String getModelClassName() {
		return Courses.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cId", getCId());
		attributes.put("cName", getCName());
		attributes.put("cCat", getCCat());
		attributes.put("cDesc", getCDesc());
		attributes.put("cPreq", getCPreq());
		attributes.put("cDuration", getCDuration());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cId = (Long)attributes.get("cId");

		if (cId != null) {
			setCId(cId);
		}

		String cName = (String)attributes.get("cName");

		if (cName != null) {
			setCName(cName);
		}

		String cCat = (String)attributes.get("cCat");

		if (cCat != null) {
			setCCat(cCat);
		}

		String cDesc = (String)attributes.get("cDesc");

		if (cDesc != null) {
			setCDesc(cDesc);
		}

		String cPreq = (String)attributes.get("cPreq");

		if (cPreq != null) {
			setCPreq(cPreq);
		}

		Integer cDuration = (Integer)attributes.get("cDuration");

		if (cDuration != null) {
			setCDuration(cDuration);
		}
	}

	@JSON
	@Override
	public long getCId() {
		return _cId;
	}

	@Override
	public void setCId(long cId) {
		_cId = cId;
	}

	@JSON
	@Override
	public String getCName() {
		if (_cName == null) {
			return StringPool.BLANK;
		}
		else {
			return _cName;
		}
	}

	@Override
	public void setCName(String cName) {
		_cName = cName;
	}

	@JSON
	@Override
	public String getCCat() {
		if (_cCat == null) {
			return StringPool.BLANK;
		}
		else {
			return _cCat;
		}
	}

	@Override
	public void setCCat(String cCat) {
		_columnBitmask |= CCAT_COLUMN_BITMASK;

		if (_originalCCat == null) {
			_originalCCat = _cCat;
		}

		_cCat = cCat;
	}

	public String getOriginalCCat() {
		return GetterUtil.getString(_originalCCat);
	}

	@JSON
	@Override
	public String getCDesc() {
		if (_cDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _cDesc;
		}
	}

	@Override
	public void setCDesc(String cDesc) {
		_cDesc = cDesc;
	}

	@JSON
	@Override
	public String getCPreq() {
		if (_cPreq == null) {
			return StringPool.BLANK;
		}
		else {
			return _cPreq;
		}
	}

	@Override
	public void setCPreq(String cPreq) {
		_cPreq = cPreq;
	}

	@JSON
	@Override
	public int getCDuration() {
		return _cDuration;
	}

	@Override
	public void setCDuration(int cDuration) {
		_cDuration = cDuration;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Courses.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Courses toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Courses)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CoursesImpl coursesImpl = new CoursesImpl();

		coursesImpl.setCId(getCId());
		coursesImpl.setCName(getCName());
		coursesImpl.setCCat(getCCat());
		coursesImpl.setCDesc(getCDesc());
		coursesImpl.setCPreq(getCPreq());
		coursesImpl.setCDuration(getCDuration());

		coursesImpl.resetOriginalValues();

		return coursesImpl;
	}

	@Override
	public int compareTo(Courses courses) {
		long primaryKey = courses.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Courses)) {
			return false;
		}

		Courses courses = (Courses)obj;

		long primaryKey = courses.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CoursesModelImpl coursesModelImpl = this;

		coursesModelImpl._originalCCat = coursesModelImpl._cCat;

		coursesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Courses> toCacheModel() {
		CoursesCacheModel coursesCacheModel = new CoursesCacheModel();

		coursesCacheModel.cId = getCId();

		coursesCacheModel.cName = getCName();

		String cName = coursesCacheModel.cName;

		if ((cName != null) && (cName.length() == 0)) {
			coursesCacheModel.cName = null;
		}

		coursesCacheModel.cCat = getCCat();

		String cCat = coursesCacheModel.cCat;

		if ((cCat != null) && (cCat.length() == 0)) {
			coursesCacheModel.cCat = null;
		}

		coursesCacheModel.cDesc = getCDesc();

		String cDesc = coursesCacheModel.cDesc;

		if ((cDesc != null) && (cDesc.length() == 0)) {
			coursesCacheModel.cDesc = null;
		}

		coursesCacheModel.cPreq = getCPreq();

		String cPreq = coursesCacheModel.cPreq;

		if ((cPreq != null) && (cPreq.length() == 0)) {
			coursesCacheModel.cPreq = null;
		}

		coursesCacheModel.cDuration = getCDuration();

		return coursesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{cId=");
		sb.append(getCId());
		sb.append(", cName=");
		sb.append(getCName());
		sb.append(", cCat=");
		sb.append(getCCat());
		sb.append(", cDesc=");
		sb.append(getCDesc());
		sb.append(", cPreq=");
		sb.append(getCPreq());
		sb.append(", cDuration=");
		sb.append(getCDuration());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.test.model.Courses");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cId</column-name><column-value><![CDATA[");
		sb.append(getCId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cName</column-name><column-value><![CDATA[");
		sb.append(getCName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cCat</column-name><column-value><![CDATA[");
		sb.append(getCCat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cDesc</column-name><column-value><![CDATA[");
		sb.append(getCDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cPreq</column-name><column-value><![CDATA[");
		sb.append(getCPreq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cDuration</column-name><column-value><![CDATA[");
		sb.append(getCDuration());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Courses.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Courses.class
		};
	private long _cId;
	private String _cName;
	private String _cCat;
	private String _originalCCat;
	private String _cDesc;
	private String _cPreq;
	private int _cDuration;
	private long _columnBitmask;
	private Courses _escapedModel;
}